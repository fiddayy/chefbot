{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d08b7a2c-a813-4a84-a37c-976a86f5b677",
   "metadata": {},
   "outputs": [],
   "source": [
    "from ddgs import DDGS\n",
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import re\n",
    "import streamlit as st\n",
    "import openai\n",
    "\n",
    "\n",
    "openrouter_api_key = \"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\"  # paste your key here securely\n",
    "\n",
    "\n",
    "def search_recipe_url(query):\n",
    "    with DDGS() as ddgs:\n",
    "        results = [r for r in ddgs.text(query, max_results=5)]\n",
    "    for r in results:\n",
    "        if \"recipe\" in r['title'].lower():\n",
    "            return r['href']\n",
    "    return None\n",
    "\n",
    "\n",
    "def basic_scrape_recipe(url):\n",
    "    try:\n",
    "        res = requests.get(url, headers={\"User-Agent\": \"Mozilla/5.0\"})\n",
    "        soup = BeautifulSoup(res.text, 'html.parser')\n",
    "\n",
    "        title = soup.find(\"title\").text.strip()\n",
    "\n",
    "        # Try to extract ingredients/instructions (very basic, site-dependent)\n",
    "        ingredients = [li.get_text().strip() for li in soup.select('li') if \"ingredient\" in li.get(\"class\", [])]\n",
    "        instructions = [p.get_text().strip() for p in soup.select('p') if len(p.get_text()) > 40]\n",
    "\n",
    "        return {\n",
    "            \"title\": title,\n",
    "            \"ingredients\": ingredients[:10],\n",
    "            \"instructions\": instructions[:10],\n",
    "            \"source\": url\n",
    "        }\n",
    "\n",
    "    except Exception as e:\n",
    "        return {\"error\": str(e)}\n",
    "\n",
    "\n",
    "import requests\n",
    "\n",
    "def generate_recipe_with_llm(query, api_key):\n",
    "    url = \"https://openrouter.ai/api/v1/chat/completions\"\n",
    "\n",
    "    headers = {\n",
    "        \"Authorization\": f\"Bearer {api_key}\",\n",
    "        \"Content-Type\": \"application/json\"\n",
    "    }\n",
    "\n",
    "    payload = {\n",
    "        \"model\": \"mistralai/mistral-7b-instruct\",\n",
    "        \"messages\": [\n",
    "            {\"role\": \"system\", \"content\": \"You are a helpful cooking assistant.\"},\n",
    "            {\"role\": \"user\", \"content\": f\"Generate a full recipe for: {query}. Include: Title, Ingredients, and Step-by-step Instructions.\"}\n",
    "        ]\n",
    "    }\n",
    "\n",
    "    response = requests.post(url, headers=headers, json=payload)\n",
    "    \n",
    "    if response.status_code == 200:\n",
    "        return response.json()['choices'][0]['message']['content']\n",
    "    else:\n",
    "        return f\"❌ API error {response.status_code}: {response.text}\"\n",
    "\n",
    "\n",
    "def chefbot(query, api_key):\n",
    "    print(f\"🍳 Looking for recipe: {query}\\n\")\n",
    "\n",
    "    url = search_recipe_url(f\"{query} site:allrecipes.com\")\n",
    "    if url:\n",
    "        print(f\"🔗 Found URL: {url}\")\n",
    "        data = basic_scrape_recipe(url)\n",
    "        if data.get(\"ingredients\") and data.get(\"instructions\"):\n",
    "            return f\"🍽️ **{data['title']}**\\n\\n🥄 **Ingredients:**\\n\" + \\\n",
    "                   \"\\n\".join(f\"- {i}\" for i in data['ingredients']) + \\\n",
    "                   \"\\n\\n🔥 **Instructions:**\\n\" + \\\n",
    "                   \"\\n\".join(f\"{idx+1}. {step}\" for idx, step in enumerate(data['instructions'])) + \\\n",
    "                   f\"\\n\\n🔗 Source: {data['source']}\"\n",
    "        else:\n",
    "            print(\"⚠️ Scrape failed. Using LLM instead.\")\n",
    "    \n",
    "    # If no URL or scrape fails\n",
    "    return generate_recipe_with_llm(query, api_key)\n",
    "\n",
    "\n",
    "# 🌐 Streamlit App UI\n",
    "# --------------------------\n",
    "st.set_page_config(page_title=\"ChefBot 🍳\", layout=\"centered\")\n",
    "st.title(\"👨‍🍳 ChefBot — LLM-Powered Recipe Finder\")\n",
    "st.markdown(\"Ask me for any recipe! I’ll search it or generate it using AI.\")\n",
    "\n",
    "api_key = st.text_input(\"🔑 OpenRouter API Key\", type=\"password\")\n",
    "query = st.text_input(\"🍲 What would you like to cook?\", placeholder=\"e.g., Chicken Biryani\")\n",
    "\n",
    "if st.button(\"🔍 Get Recipe\") and api_key and query:\n",
    "    with st.spinner(\"Finding your recipe...\"):\n",
    "        result = chefbot(query, api_key)\n",
    "        st.markdown(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc501335-70d8-46eb-9875-d9899601c2dd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5260e13f-ade9-4c80-b231-430f0b197e9f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13dfef4a-159f-4bf1-adf3-4712e2d5a6bc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4f9202a-a54f-4387-960c-2ea4fd4365e5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9bc5abe2-6d23-4720-9040-c1975b60bbe8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "73902e42-418a-4a3d-9779-3eaf5c49ea9b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b0d4546-0166-4dbc-9e48-bf948b48fed0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
